import { Component, Input, OnInit, ViewChild } from '@angular/core';
import { AgGridAngular } from 'ag-grid-angular';

interface SegmentNode {
  key: string;
  label: string;
  data: {
    horizonWeight: number;
    segmentWeight: number;
  };
}

interface HorizonNode {
  key: string;
  label: string;
  children: SegmentNode[];
}

interface TenureNode {
  key: string;
  label: string;
  children: HorizonNode[];
}

@Component({
  selector: 'app-tenure-cards',
  templateUrl: './tenure-cards.component.html'
})
export class TenureCardsComponent implements OnInit {
  @Input() tenureGroups: TenureNode[] = [];

  // AG-Grid col defs for the left (horizons) table
  horizonCols = [
    { headerName: 'Horizon', field: 'label', flex: 1 },
    {
      headerName: 'Weight',
      valueGetter: params =>
        params.data.children
          .reduce((sum: number, seg: SegmentNode) => sum + seg.data.horizonWeight, 0),
      flex: 1
    }
  ];

  // AG-Grid col defs for the right (segments) table
  segmentCols = [
    { headerName: 'Segment', field: 'label', flex: 1, editable: false },
    {
      headerName: 'Horizon Wt',
      field: 'data.horizonWeight',
      editable: true,
      valueParser: params => Number(params.newValue),
      flex: 1
    },
    {
      headerName: 'Segment Wt',
      field: 'data.segmentWeight',
      editable: true,
      valueParser: params => Number(params.newValue),
      flex: 1
    }
  ];

  // track which horizon is selected per tenure card:
  selectedHorizon = new Map<string, HorizonNode>();

  ngOnInit() {
    // default‚Äêselect first horizon in each tenure
    for (const tg of this.tenureGroups) {
      if (tg.children.length) {
        this.selectedHorizon.set(tg.key, tg.children[0]);
      }
    }
  }

  onHorizonClicked(tg: TenureNode, event: any) {
    // set selected horizon for this tenure card
    this.selectedHorizon.set(tg.key, event.data);
  }

  getHorizonRowData(tg: TenureNode) {
    return tg.children;
  }

  getSegmentRowData(tg: TenureNode) {
    return this.selectedHorizon.get(tg.key)?.children || [];
  }

  onSegmentCellValueChanged(event: any, tg: TenureNode) {
    // here you can push updates back to your server or update your model
    console.log(`Updated in tenure ${tg.label}:`, event);
  }
}


<div class="row">
  <div
    class="col-lg-4 col-md-6 mb-4"
    *ngFor="let tg of tenureGroups"
  >
    <div class="card h-100">
      <div class="card-header bg-primary text-white">
        Tenure: {{ tg.label }}
      </div>
      <div class="card-body p-2 d-flex">
        <!-- left: horizons list -->
        <div class="flex-fill me-2" style="min-width: 0;">
          <ag-grid-angular
            #hGrid
            class="ag-theme-alpine"
            [columnDefs]="horizonCols"
            [rowData]="getHorizonRowData(tg)"
            rowSelection="single"
            (rowClicked)="onHorizonClicked(tg, $event)"
            style="height: 200px; width: 100%;"
          ></ag-grid-angular>
        </div>

        <!-- right: segment editor -->
        <div class="flex-fill ms-2" style="min-width: 0;">
          <ag-grid-angular
            #sGrid
            class="ag-theme-alpine"
            [columnDefs]="segmentCols"
            [rowData]="getSegmentRowData(tg)"
            editable="true"
            (cellValueChanged)="onSegmentCellValueChanged($event, tg)"
            style="height: 200px; width: 100%;"
          ></ag-grid-angular>
        </div>
      </div>
    </div>
  </div>
</div>

.card {
  display: flex;
  flex-direction: column;
}

.card-body {
  flex: 1;
  display: flex;
}

.ag-theme-alpine {
  font-size: 0.9rem;
}

/* width of all scrollbars */
*::-webkit-scrollbar {
  width: var(--scrollbar-width);
  height: var(--scrollbar-width);
}

/* the track (background) */
*::-webkit-scrollbar-track {
  background: var(--scrollbar-track);
  border-radius: calc(var(--scrollbar-width) / 2);
}

/* the draggable thumb */
*::-webkit-scrollbar-thumb {
  background: var(--scrollbar-thumb);
  border-radius: calc(var(--scrollbar-width) / 2);
  transition: background 0.2s;
}

/* hover state on the thumb */
*::-webkit-scrollbar-thumb:hover {
  background: var(--scrollbar-thumb-hover);
}
/* globally thin scrollbars + custom colors */
* {
  scrollbar-width: thin;
  scrollbar-color: var(--scrollbar-thumb) var(--scrollbar-track);
}



